[
  {
    "objectID": "load_sps_library.html",
    "href": "load_sps_library.html",
    "title": "Module: Loading spectral library",
    "section": "",
    "text": "source\n\nload_fsps_spectral_library\n\n load_fsps_spectral_library (flux_fileIn:str='/home/runner/work/watercolor\n                             /watercolor/watercolor/data/sps_library_data/\n                             ssp_spec_flux_lines.npy', wave_fileIn:str='/h\n                             ome/runner/work/watercolor/watercolor/waterco\n                             lor/data/sps_library_data/ssp_spec_wave.npy')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nflux_fileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/ssp_spec_flux_lines.npy\nInput flux file of the stellar spectra library\n\n\nwave_fileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/ssp_spec_wave.npy\nInput wavelength file of the stellar spectra library\n\n\nReturns\ntuple\n\nFluxes, wavelengths\n\n\n\n\nsource\n\n\nload_fsps_age_metallicity\n\n load_fsps_age_metallicity (age_fileIn:str='/home/runner/work/watercolor/w\n                            atercolor/watercolor/data/sps_library_data/log\n                            _age.npy', metal_fileIn:str='/home/runner/work\n                            /watercolor/watercolor/watercolor/data/sps_lib\n                            rary_data/zlegend.npy',\n                            Z_solar:numpy.float32=0.019)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nage_fileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/log_age.npy\nInput metallicity file of the stellar spectra library\n\n\nmetal_fileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/zlegend.npy\nInput age file of the stellar spectra library\n\n\nZ_solar\nfloat32\n0.019\nSolar metallicity in Padova\n\n\nReturns\ntuple\n\nAge in Gyr, Metallicity in Z/Z_sun",
    "crumbs": [
      "Module: Loading spectral library"
    ]
  },
  {
    "objectID": "cosmic_dimming.html",
    "href": "cosmic_dimming.html",
    "title": "Module: Cosmic distances",
    "section": "",
    "text": "# #| hide\n\n\n# np.savetxt('wave_spec.txt', np.array([spec_wave_ssp, spec_csp]).T, delimiter=\",\", header=\"wavelength(Angstorms), SED (Lsun/Angstorms)\", fmt=\"%2.2f\")\n\n\nsource\n\nspectrum_convert_from_uJy\n\n spectrum_convert_from_uJy (wave:&lt;built-infunctionarray&gt;, spec:&lt;built-\n                            infunctionarray&gt;, funit:str='Jy')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwave\narray\n\nInput flux from ‘uJy’\n\n\nspec\narray\n\nWavelength\n\n\nfunit\nstr\nJy\nOutput units\n\n\nReturns\ntuple\n\nConverted flux to ‘erg/s/cm2’ or ‘erg/s/cm2/A’\n\n\n\n\nsource\n\n\nspectrum_convert_from_ergscm2A\n\n spectrum_convert_from_ergscm2A (wave:&lt;built-infunctionarray&gt;,\n                                 spec:&lt;built-infunctionarray&gt;,\n                                 funit:str='Jy')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwave\narray\n\nInput flux from ‘erg/s/cm2/A’\n\n\nspec\narray\n\nWavelength\n\n\nfunit\nstr\nJy\nOutput units\n\n\nReturns\narray\n\nConverted flux to ‘erg/s/cm2’ or ‘Jy’\n\n\n\n\n# #| export\n\n# def spectrum_dimmed_and_redshifted(DL_Gpc:np.float64=0.0, # Luminosity distance (LD) in unit of Gpc.\n#                       cosmo:str='flat_LCDM', # Choice of Astropy cosmology models ['flat_LCDM', 'WMAP9', 'Planck15']\n#                       H0:np.float64=70.0, # Hubble constant at z=0.\n#                       Om0:np.float64=0.3, # Omega matter at z=0.\n#                       galaxy_redshift:np.float64=0.01, # Redshift\n#                       wave:np.array=[], # Wavelength grids of the input spectrum.\n#                       spec: np.array=[] # Fluxes of the input spectrum.  \n#                       ) -&gt; tuple: # wavelength, SED of the redshifted and dimmed spectrum\n\n#     if DL_Gpc &gt; 0.0:\n#         DL = DL_Gpc\n#         DL = DL*3.08568e+27\n#     else:\n#         if cosmo=='flat_LCDM' or cosmo==0:\n#             cosmo1 = FlatLambdaCDM(H0=H0, Om0=Om0)\n#             DL = cosmo1.luminosity_distance(galaxy_redshift)      # in unit of Mpc\n        \n#         elif cosmo=='WMAP9' or cosmo==3:\n#             DL = WMAP9.luminosity_distance(galaxy_redshift)\n        \n#         elif cosmo=='Planck15' or cosmo==5:\n#             DL = Planck15.luminosity_distance(galaxy_redshift)\n\n        \n#         DL = DL.value/1.0e+3\n#         DL = DL*3.08568e+27\n\n#     redsh_wave = (1.0+galaxy_redshift)*np.asarray(wave)\n#     cor = 1.0/12.56637061/DL/DL/(1.0+galaxy_redshift)           # flux in L_solar cm^-2 A^-1\n#     cor = cor*3.826e+33                           # flux in erg s^-1 cm^-2 A^-1\n#     redsh_spec = cor*np.asarray(spec)\n\n#     return redsh_wave, redsh_spec\n\n\nsource\n\n\nspectrum_dimmed_and_redshifted\n\n spectrum_dimmed_and_redshifted (DL_Gpc:numpy.float64=0.0,\n                                 cosmo:str='flat_LCDM',\n                                 H0:numpy.float64=70.0,\n                                 Om0:numpy.float64=0.3,\n                                 galaxy_redshift:numpy.float64=0.01,\n                                 wave:&lt;built-infunctionarray&gt;=[],\n                                 spec:&lt;built-infunctionarray&gt;=[])\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nDL_Gpc\nfloat64\n0.0\nLuminosity distance (LD) in unit of Gpc.\n\n\ncosmo\nstr\nflat_LCDM\nChoice of Astropy cosmology models [‘flat_LCDM’, ‘WMAP9’, ‘Planck15’]\n\n\nH0\nfloat64\n70.0\nHubble constant at z=0.\n\n\nOm0\nfloat64\n0.3\nOmega matter at z=0.\n\n\ngalaxy_redshift\nfloat64\n0.01\nRedshift\n\n\nwave\narray\n[]\nWavelength grids of the input spectrum in [A]\n\n\nspec\narray\n[]\nFluxes of the input spectrum in [L_bolometric A^-1]\n\n\nReturns\ntuple\n\nwavelength, SED of the redshifted and dimmed spectrum\n\n\n\n\n# 1.0/((4*np.pi*DL*DL)*(1.0+galaxy_redshift))\n\n\n# #| hide \n\n# spec_csp_ergscm2A = spectrum_convert_from_uJy(spec_wave_ssp, \n#                                 spec_csp,\n#                                 funit='erg/s/cm2/A')\n\n# redsh_wave, redsh_spec = spectrum_dimmed_and_redshifted(DL_Gpc=0.0,\n#                                            cosmo='flat_LCDM',\n#                                            H0=70.0,\n#                                            Om0=0.3,\n#                                            z=0.01,\n#                                            wave=spec_wave_ssp,\n#                                            spec=spec_csp_ergscm2A)\n\n# redsh_spec = spectrum_convert_from_ergscm2A(redsh_wave,\n#                                 redsh_spec,\n#                                 funit='Jy')#*1e6\n\n\n# #| export\n\n# def combine_redshift_and_dimming_effect(wave:np.array=[], # Wavelength grids of the input spectrum in Unit \n#                                         spec:np.array=[], # # Fluxes of the input spectrum.  \n#                                         galaxy_redshift:np.float64=0.01 # Redshift of the galaxy\n#                                        ) -&gt;tuple: # Output of wavelength and spectra\n    \n#     spec_csp_ergscm2A = spectrum_convert_from_uJy(wave, \n#                                 spec,\n#                                 funit='erg/s/cm2/A')\n\n#     redsh_wave, redsh_spec = spectrum_dimmed_and_redshifted(DL_Gpc=0.0,\n#                                                cosmo='flat_LCDM',\n#                                                H0=70.0,\n#                                                Om0=0.3,\n#                                                galaxy_redshift=galaxy_redshift,\n#                                                wave=wave,\n#                                                spec=spec_csp_ergscm2A)\n\n#     redsh_spec = spectrum_convert_from_ergscm2A(redsh_wave,\n#                                     redsh_spec,\n#                                     funit='Jy')*1e6\n    \n#     return redsh_wave, redsh_spec\n\n\nsource\n\n\ncombine_redshift_and_dimming_effect\n\n combine_redshift_and_dimming_effect (wave:&lt;built-infunctionarray&gt;=[],\n                                      spec:&lt;built-infunctionarray&gt;=[],\n                                      galaxy_redshift:numpy.float64=0.01)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwave\narray\n[]\nWavelength grids of the input spectrum in Unit (A)\n\n\nspec\narray\n[]\n# Fluxes of the input spectrum. Fluxes of the input spectrum (in L_bolometric A^-1)\n\n\ngalaxy_redshift\nfloat64\n0.01\nRedshift of the galaxy\n\n\nReturns\ntuple\n\nOutput of wavelength and spectra\n\n\n\n\n# #| hide\n\n# galaxy_redshift = 0.001\n# cosmo1 = FlatLambdaCDM(H0=70.0, Om0=0.3)\n# DL = cosmo1.luminosity_distance(galaxy_redshift)      # in unit of [Mpc]\n# DL = DL.value/1e3 #in [Gpc]\n# dL = DL*3.08568e+27 # in [cm]\n# # Redefine the speed of light in cm/s\n# c = 2.998e10\n\n# spec0 = spec_csp * 1e33 / (4*np.pi*(dL**2)*(1.0+galaxy_redshift))  # Convert luminosity to flux in erg/s/cm^2/A\n# spec0 *= spec_wave_ssp**2 / c  # Convert flux per A to flux per Hz in erg/s/cm^2/Hz\n# spec0 *= 1e23  # Convert flux from erg/s/cm^2/Hz to Jy\n# spec0 *= 1e3  # Jy to mJy",
    "crumbs": [
      "Module: Cosmic distances"
    ]
  },
  {
    "objectID": "ssp_interpolation.html",
    "href": "ssp_interpolation.html",
    "title": "Module: Interpolation routines for SSP",
    "section": "",
    "text": "source\n\nspec_ssp_lookup_nearest\n\n spec_ssp_lookup_nearest (age_hydro_i:numpy.float32=None,\n                          metal_hydro_i:numpy.float32=None,\n                          mass_hydro_i:numpy.float32=None,\n                          age_fsps:numpy.float32=None,\n                          z_padova_fsps:numpy.float32=None,\n                          spec_flux:&lt;built-infunctionarray&gt;=None,\n                          spec_wave:&lt;built-infunctionarray&gt;=None)\n\nLookup table for finding the closest SPS entry to HACC SSP\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nage_hydro_i\nfloat32\nNone\nAge of the HACC stellar particle\n\n\nmetal_hydro_i\nfloat32\nNone\nMetallicity of the stellar particle\n\n\nmass_hydro_i\nfloat32\nNone\nMass of the stellar particle\n\n\nage_fsps\nfloat32\nNone\nAges in SPS library\n\n\nz_padova_fsps\nfloat32\nNone\nMetallicities in SPS library\n\n\nspec_flux\narray\nNone\nStellar library SEDs\n\n\nspec_wave\narray\nNone\nStellar library wavelengths\n\n\nReturns\ntuple\n\nSSP Wavelength (A), SSP Luminosity (Lsun/A)\n\n\n\n\nsource\n\n\nspec_ssp_lookup\n\n spec_ssp_lookup (age_hydro_i:numpy.float32=None,\n                  metal_hydro_i:numpy.float32=None,\n                  mass_hydro_i:numpy.float32=None,\n                  age_fsps:numpy.float32=None,\n                  z_padova_fsps:numpy.float32=None, spec_flux:&lt;built-\n                  infunctionarray&gt;=None, spec_wave:&lt;built-\n                  infunctionarray&gt;=None)\n\nInterpolation for finding the closest SPS entry to HACC SSP\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nage_hydro_i\nfloat32\nNone\nAge of the HACC stellar particle\n\n\nmetal_hydro_i\nfloat32\nNone\nMetallicity of the stellar particle\n\n\nmass_hydro_i\nfloat32\nNone\nMass of the stellar particle\n\n\nage_fsps\nfloat32\nNone\nAges in SPS library\n\n\nz_padova_fsps\nfloat32\nNone\nMetallicities in SPS library\n\n\nspec_flux\narray\nNone\nStellar library SEDs\n\n\nspec_wave\narray\nNone\nStellar library wavelengths\n\n\nReturns\ntuple\n\nSSP Wavelength (A), SSP Luminosity (Lsun/A)",
    "crumbs": [
      "Module: Interpolation routines for SSP"
    ]
  },
  {
    "objectID": "load_sim_stellar_catalog.html",
    "href": "load_sim_stellar_catalog.html",
    "title": "Module: Loading HACC stellar catalog",
    "section": "",
    "text": "galaxy_tag: Tags to galaxies given in the HACC datasets\nstellar idx: Unique ID for individual particles\nmetallicity: Fraction of the metals in the stellar particles (Not rescaled by Zsun)\nmass: Mass of the stellar particle in Msun units\nage: Age of the stellar particles in 1/H0 units\nx, y, z: Particle positions in Mpc/h units\nvx, vy, vz: Velocity of the particles\n\n\nsource\n\n\n\n\n load_hacc_galaxy_data (fileIn:str='/home/runner/work/watercolor/watercolo\n                        r/watercolor/data/test_hacc_stellar_catalog/Gal_Z0\n                        .txt', Z_solar:numpy.float32=0.019,\n                        H0:numpy.float32=71.0)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/test_hacc_stellar_catalog/Gal_Z0.txt\nInput galaxy catalog file from HACC hydro sim\n\n\nZ_solar\nfloat32\n0.019\nSolar metallicity\n\n\nH0\nfloat32\n71.0\nHubble constant\n\n\nReturns\ntuple\n\ngalaxy_tag, stellar_indices, metallicity, mass, age, x, y, z",
    "crumbs": [
      "Module: Loading HACC stellar catalog"
    ]
  },
  {
    "objectID": "load_sim_stellar_catalog.html#the-entries-in-the-current-stellar-catalog-are",
    "href": "load_sim_stellar_catalog.html#the-entries-in-the-current-stellar-catalog-are",
    "title": "Module: Loading HACC stellar catalog",
    "section": "",
    "text": "galaxy_tag: Tags to galaxies given in the HACC datasets\nstellar idx: Unique ID for individual particles\nmetallicity: Fraction of the metals in the stellar particles (Not rescaled by Zsun)\nmass: Mass of the stellar particle in Msun units\nage: Age of the stellar particles in 1/H0 units\nx, y, z: Particle positions in Mpc/h units\nvx, vy, vz: Velocity of the particles\n\n\nsource\n\n\n\n\n load_hacc_galaxy_data (fileIn:str='/home/runner/work/watercolor/watercolo\n                        r/watercolor/data/test_hacc_stellar_catalog/Gal_Z0\n                        .txt', Z_solar:numpy.float32=0.019,\n                        H0:numpy.float32=71.0)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfileIn\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/test_hacc_stellar_catalog/Gal_Z0.txt\nInput galaxy catalog file from HACC hydro sim\n\n\nZ_solar\nfloat32\n0.019\nSolar metallicity\n\n\nH0\nfloat32\n71.0\nHubble constant\n\n\nReturns\ntuple\n\ngalaxy_tag, stellar_indices, metallicity, mass, age, x, y, z",
    "crumbs": [
      "Module: Loading HACC stellar catalog"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WATERCOLOR",
    "section": "",
    "text": "Temporary installation:\npip install git+https://github.com/nesar/watercolor.git\nFuture:\npip install watercolor",
    "crumbs": [
      "WATERCOLOR"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "WATERCOLOR",
    "section": "",
    "text": "Temporary installation:\npip install git+https://github.com/nesar/watercolor.git\nFuture:\npip install watercolor",
    "crumbs": [
      "WATERCOLOR"
    ]
  },
  {
    "objectID": "index.html#simple-implementation",
    "href": "index.html#simple-implementation",
    "title": "WATERCOLOR",
    "section": "Simple implementation",
    "text": "Simple implementation\n\nfrom watercolor.paint import photometry_from_catalog\n\n/lcrc/project/cosmo_ai/nramachandra/opencosmo_env/lib/python3.11/site-packages/watercolor/load_sim_stellar_catalog.py:10: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools&lt;81.\n  import pkg_resources\n\n\n\nFirst we load the galaxy catalog. The main physical quantities required for painting the colors are the metallicities, stellar mass and age of the star particles of a galaxy.\n\ngalaxy_star_catalog_file='../watercolor/data/test_hacc_stellar_catalog/Gal_z0_hbin.txt' # HACC galaxy catalog\nfinal_sed_mJy, final_wave_um, lsst_mags, spherex_mags, cosmos_mags = photometry_from_catalog(galaxy_star_catalog_file)\n\nNumber of galaxies: 200\n\n\n\n\nThe single-line command provides the SEDs and magnitudes from LSST, SPHEREx and COSMOS filters\n\n# Create the main figure and a gridspec object\nfig = plt.figure(figsize=(10, 10))\ngs = gridspec.GridSpec(2, 2, height_ratios=[1,1])\n\n# Create the three subplots\nax0 = fig.add_subplot(gs[0, :])  # Top panel spanning both columns\nax1 = fig.add_subplot(gs[1, 0])  # Bottom left panel\nax2 = fig.add_subplot(gs[1, 1])  # Bottom right panel\n\n\n\n\nax0.set_title('Spectral Energy Distribution')\nax1.set_title('Color-Color plot (LSST bandpass)')\nax2.set_title('Color-Mag plot (LSST bandpass)')\n\n\nnp.random.seed(2)\nfor gal_id in np.random.randint(0, final_sed_mJy.shape[0], 12):\n    ax0.plot(final_wave_um[gal_id], final_sed_mJy[gal_id], label=str(gal_id), alpha=0.94)\n\nax0.set_xlim(0.09, 3.2)\nax0.set_ylim(1e-10, 1e2)\nax0.set_xscale('log')\nax0.set_yscale('log')\n\nax0.set_xlabel(r'${\\rm um}$', fontsize = 'x-large')\nax0.set_ylabel(r'${\\rm mJy}$', fontsize = 'x-large')\n# ax[0].legend(fontsize='x-large', ncol=3, title='Galaxy number')\n    \nu, g, r, i, z, Y = lsst_mags.T\n\nax1.scatter(u-g, r-i, c=Y)\nax1.set_xlabel(r'${\\rm (u-g)}$', fontsize = 'x-large')\nax1.set_ylabel(r'${\\rm (r-i)}$', fontsize = 'x-large')\n\nax2.scatter(i, g-r, c=u)\nax2.set_xlabel(r'${\\rm (i)}$', fontsize = 'x-large')\nax2.set_ylabel(r'${\\rm (g-r)}$', fontsize = 'x-large')\n# ax[2].axhline(y=1.3, color='red')\n# ax[2].axhline(y=0.1, color='blue')\nax2.fill_between( np.linspace(0.9*i.min(), 1.1*i.max(), 100), 1.3, 2.0,  facecolor='red', alpha=0.2, interpolate=True)\nax2.fill_between( np.linspace(0.9*i.min(), 1.1*i.max(), 100), -0.2, 0.1,  facecolor='blue', alpha=0.2, interpolate=True)\n\n\n\nplt.show()",
    "crumbs": [
      "WATERCOLOR"
    ]
  },
  {
    "objectID": "index.html#behind-the-scenes",
    "href": "index.html#behind-the-scenes",
    "title": "WATERCOLOR",
    "section": "Behind the scenes",
    "text": "Behind the scenes\n\n1. First we import the following modules of hydro_colors\n\nimport watercolor\nfrom watercolor.load_sim_stellar_catalog import load_hacc_galaxy_data\nfrom watercolor.calculate_csp import calc_fluxes_for_galaxy\nfrom watercolor.load_sps_library import LIBRARY_FLUX_FILE, LIBRARY_WAVE_FILE, LIBRARY_AGE_FILE, LIBRARY_METAL_FILE\nfrom watercolor.dust_attenuation import spectrum_dusted, log_total_stellar_metal, log_total_stellar_mass\nfrom watercolor.cosmic_distance_effects import combine_redshift_and_dimming_effect\nfrom watercolor.filter_convolution import load_survey_pickle, photometry_from_spectra\n\n\n\n2. Then the galaxy-star catalog from HACC is loaded, using a unique galaxy tag, we select a galaxy\n\nfof_halo_tag, if_satellite, galaxy_tags, stellar_idx, metal_hydro, mass, age_hydro, x, y, z , vx, vy, vz = watercolor.load_sim_stellar_catalog.load_hacc_galaxy_data(galaxy_star_catalog_file)\n\n\ngalaxy_number = 42 # Choosing one of the galaxies in the catalog\nunique_galaxy_tag = np.unique(galaxy_tags)[galaxy_number]\nprint('Number of galaxies: %d'%np.unique(galaxy_tags).shape[0])\n\nmstar_i = mass[galaxy_tags == unique_galaxy_tag]\nmetal_i = metal_hydro[galaxy_tags == unique_galaxy_tag]\nif_satellite_i = if_satellite[galaxy_tags == unique_galaxy_tag]\n\nlogZ = log_total_stellar_metal(metal_i, mstar_i)\nlogmstar = log_total_stellar_mass(mstar_i)\n\nNumber of galaxies: 200\n\n\n\n\n3. After selecting a unique galaxy tag, we calculate the SED. This is the rest-frame SED is due to spectral emission alone, and without dust attenuation.\n\nspec_wave_ssp, spec_flux_ssp, spec_csp, flux_proxy, gal_stellar_mass = watercolor.calculate_csp.calc_fluxes_for_galaxy(galaxy_star_catalog_file,\n                                                                                                                       unique_galaxy_tag,\n                                                                                                                       LIBRARY_FLUX_FILE,\n                                                                                                                       LIBRARY_WAVE_FILE,\n                                                                                                                       LIBRARY_AGE_FILE,\n                                                                                                                       LIBRARY_METAL_FILE)\n\n\n\n4. We plot SEDs from both SSPs and CSPs\n\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n\n\nfig, a = plt.subplots(2,1, figsize=(10, 6), sharex=True, sharey=False, height_ratios=[3, 2])\nc_norm = mpl.colors.Normalize(vmin=np.min(flux_proxy), vmax=np.max(flux_proxy))\n# c_norm = mpl.colors.Normalize(vmin=np.min(np.log10(mass)), vmax=np.max(np.log10(mass)))\nc_map  = mpl.cm.coolwarm\n\ns_map  = mpl.cm.ScalarMappable(cmap=c_map, norm=c_norm)\ns_map.set_array([])\n\n\nfor idx in range(spec_flux_ssp.shape[0]):\n    \n    # spec_flux_ssp[idx] = spec_ssp(age_hydro[ssp_id], metal_hydro[ssp_id], mass[ssp_id])\n    a[0].plot(spec_wave_ssp, spec_flux_ssp[idx], \n              # color=s_map.to_rgba(np.log10(mass[ssp_id])), \n              color=s_map.to_rgba(flux_proxy[idx]), \n              alpha=0.5)\n    \n    \ncbaxes = inset_axes(a[0], width=\"40%\", height=\"4%\", loc=2) \n# plt.colorbar(cax=cbaxes, ticks=[0.,1], orientation='horizontal')\n\ncbar = plt.colorbar(s_map, cax = cbaxes, \n             orientation = 'horizontal')\n             # pad=0.1)\n    \ncbar.set_label(r'Flux (rescaled)', fontsize=16)\n\n#####################################################################\n\na[1].plot(spec_wave_ssp, spec_csp)\n\n\n# a[0].set_ylim(1e-9, 1e-6)\n# a[0].set_yscale('log')\n# a[1].set_yscale('log')\n# a[1].set_xscale('log')\na[1].set_xlim(3e3, 1e4)\n\n# a[0].set_xlabel(r'${\\rm Wavelength\\ [\\AA]}$', fontsize = 'xx-large')\na[1].set_xlabel(r'${\\rm Wavelength\\ [\\AA]}$', fontsize = 'xx-large')\na[0].set_ylabel(r'$L_{\\rm SSP}(\\lambda)\\ {\\rm [L_{\\odot}/\\AA]}$', fontsize = 'xx-large')\na[1].set_ylabel(r'$L_{\\rm CSP}(\\lambda)\\ {\\rm [L_{\\odot}/\\AA]}$', fontsize = 'xx-large')\n\nfig.tight_layout()\n\nplt.savefig('../../Plots/ssp_csp_spec.png', dpi=300)\n\n/lcrc/project/cosmo_ai/nramachandra/Projects/tmp/ipykernel_4356/1573131946.py:47: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  fig.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\n5. CSPs are attenuation due to dust\n\nspec_wave_csp_dusted = spectrum_dusted(spec_csp, spec_wave_ssp, logmstar, logZ, 0.01)\n\n\nf, a = plt.subplots(1, 1, figsize=(12, 3))\na.plot(spec_wave_ssp, spec_csp, label='No dust')\na.plot(spec_wave_ssp, spec_wave_csp_dusted, label='With dust attenuation')\n\na.set_xlim(3e3, 1e4)\n\na.set_xlabel(r'${\\rm wavelength\\ [\\AA]}$', fontsize = 'x-large')\na.set_ylabel(r'$L_{\\rm CSP}(\\lambda)\\ {\\rm [L_{\\odot}/\\AA]}$', fontsize = 'x-large')\na.legend(fontsize='x-large')\n\n\n\n\n\n\n\n\n\n\n6. The resulting dust attenuated spectra undergoes cosmic dimming and redshifting\n\nredsh_wave, redsh_spec = combine_redshift_and_dimming_effect(wave=spec_wave_ssp, \n                                                             spec=spec_wave_csp_dusted, \n                                                             galaxy_redshift=0.001)\n\n\nf, a = plt.subplots(1, 1, figsize=(12, 3))\na.plot(spec_wave_ssp, spec_csp, label='Pre-distance effects')\na.plot(redsh_wave, redsh_spec*1e6, label='Redshift and dimming')\n\n\n\n# a.set_xlim(3e3, 1e4)\na.set_xlim(3e3, 1e6)\n\na.set_xscale('log')\n# a.set_yscale('log')\n\na.set_xlabel(r'${\\rm wavelength\\ [\\AA]}$', fontsize = 'x-large')\na.set_ylabel(r'$L_{\\rm CSP}(\\lambda)\\ {\\rm [L_{\\odot}/\\AA]}$', fontsize = 'x-large')\na.legend(fontsize='x-large')\n\n\n\n\n\n\n\n\n\n\n7. The final spectrum is convolved with telescope transmission curves to obtain magnitudes\n\n##### Load survey filters \n\nSURVEY_STRING = 'SPHEREx'\ncentral_wavelengths, bandpass_wavs, bandpass_vals, bandpass_names = load_survey_pickle(SURVEY_STRING)\n\n##### Compute bandpasses\n\n# sed_um_wave = spec_wave_ssp/1e4\n# sed_mJy_flux = spec_csp*1e3\nsed_um_wave = redsh_wave/1e4\nsed_mJy_flux = redsh_spec*1e3\n\nflux_survey, appmag_ext_survey, band_fluxes_survey = photometry_from_spectra(central_wavelengths, \n                                                                          sed_um_wave, \n                                                                          sed_mJy_flux, \n                                                                          bandpass_wavs, \n                                                                          bandpass_vals, \n                                                                          bandpass_names,\n                                                                          interp_kind='linear',\n                                                                          plot=True,\n                                                                          clip_bandpass=True)\n\n\n\n\n\n\n\n\n\n##### Load survey filters \n\nSURVEY_STRING = 'LSST'\ncentral_wavelengths, bandpass_wavs, bandpass_vals, bandpass_names = load_survey_pickle(SURVEY_STRING)\n\n##### Compute bandpasses\n\n# sed_um_wave = spec_wave_ssp/1e4\n# sed_mJy_flux = spec_csp*1e3\nsed_um_wave = redsh_wave/1e4\nsed_mJy_flux = redsh_spec*1e3\n\nflux_survey, appmag_ext_survey, band_fluxes_survey = photometry_from_spectra(central_wavelengths, \n                                                                          sed_um_wave, \n                                                                          sed_mJy_flux, \n                                                                          bandpass_wavs, \n                                                                          bandpass_vals, \n                                                                          bandpass_names,\n                                                                          interp_kind='linear',\n                                                                          plot=True,\n                                                                          clip_bandpass=True)\n\n\n\n\n\n\n\n\n\n##### Load survey filters \n\nSURVEY_STRING = 'COSMOS'\ncentral_wavelengths, bandpass_wavs, bandpass_vals, bandpass_names = load_survey_pickle(SURVEY_STRING)\n\n\n##### Compute bandpasses\n\n# sed_um_wave = spec_wave_ssp/1e4\n# sed_mJy_flux = spec_csp*1e3\nsed_um_wave = redsh_wave/1e4\nsed_mJy_flux = redsh_spec*1e3\n\nflux_survey, appmag_ext_survey, band_fluxes_survey = photometry_from_spectra(central_wavelengths, \n                                                                          sed_um_wave, \n                                                                          sed_mJy_flux, \n                                                                          bandpass_wavs, \n                                                                          bandpass_vals, \n                                                                          bandpass_names,\n                                                                          interp_kind='linear',\n                                                                          plot=True,\n                                                                          clip_bandpass=True)",
    "crumbs": [
      "WATERCOLOR"
    ]
  },
  {
    "objectID": "index.html#profiles-of-the-galaxies-can-be-checked-too",
    "href": "index.html#profiles-of-the-galaxies-can-be-checked-too",
    "title": "WATERCOLOR",
    "section": "Profiles of the galaxies can be checked too",
    "text": "Profiles of the galaxies can be checked too\n\ndef radial_luminosity_profile(data, \n                              num_bins=15):\n    # Calculate the radial distances for each point\n    \n    data[:, 0] = data[:, 0] - np.mean(data[:, 0])\n    data[:, 1] = data[:, 1] - np.mean(data[:, 1])\n    \n    r = np.sqrt(data[:, 0]**2 + data[:, 1]**2)\n    \n    # Bin data and sum luminosities within each bin\n    bin_edges = np.linspace(0, r.max(), num_bins+1)\n    luminosity, _ = np.histogram(r, bins=bin_edges, weights=data[:, 2])\n    \n    # Return the bin centers and corresponding luminosities\n    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n    return bin_centers, luminosity\n\ndef radial_mass_density_from_lum(data, \n                                 num_bins=15):\n    \n    data[:, 0] = data[:, 0] - np.mean(data[:, 0])\n    data[:, 1] = data[:, 1] - np.mean(data[:, 1])\n    \n    # Calculate the radial distances for each point\n    r = np.sqrt(data[:, 0]**2 + data[:, 1]**2)\n    \n    # Bin data and sum \"masses\" (luminosities) within each bin\n    bin_edges = np.linspace(0, r.max(), num_bins+1)\n    total_mass, _ = np.histogram(r, bins=bin_edges, weights=data[:, 3])\n    \n    # Calculate the area of each annulus: π(R_outer^2 - R_inner^2)\n    areas = np.pi * (bin_edges[1:]**2 - bin_edges[:-1]**2)\n    \n    # Compute mass density\n    mass_density = total_mass / areas\n    \n    # Return the bin centers and corresponding mass densities\n    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n    return bin_centers, mass_density\n\n\ngal_tag_cond = np.where(galaxy_tags == unique_galaxy_tag)\n\nx_select =  (x[gal_tag_cond])# - np.mean(x[gal_tag_cond]))/(np.max(x[gal_tag_cond]) - np.min(x[gal_tag_cond]))\ny_select =  (y[gal_tag_cond])# - np.mean(y[gal_tag_cond]))/(np.max(y[gal_tag_cond]) - np.min(y[gal_tag_cond]))\n\nz_select = np.trapz(spec_flux_ssp, spec_wave_ssp)\nm_select = mass[gal_tag_cond]\n\n\nbin_centers, mass_densities_direct = radial_mass_density_from_lum(np.array([x_select, y_select, z_select, m_select]).T)\n\n# # Plotting the radial mass density profile (direct from luminosity)\nf, a = plt.subplots(1, 2, figsize=(14, 4))\n\n\n# Plotting the radial mass density profile\na[0].plot(bin_centers*1e3, mass_densities_direct, '-ko', label='Mass Density Profile')\na[0].set_xlabel('Radial Distance (kpc)')\na[0].set_ylabel('Mass Density (M_solar/kpc^2)')\na[0].set_title('Radial Mass Density Profile')\na[0].legend()\n\n\n\nbin_centers, luminosities = radial_luminosity_profile(np.array([x_select, y_select, z_select, m_select]).T)\n\n# Plotting the radial luminosity profile\na[1].plot(bin_centers*1e3, luminosities, '-ko', label='Luminosity Profile')\na[1].set_xlabel('Radial Distance (kpc)')\na[1].set_ylabel('Luminosity (Jansky)')\na[1].set_title('Radial Luminosity Profile')\na[1].legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom scipy.ndimage import gaussian_filter\n\n\ndef canvas_plot(data, \n                canvas_size = 256, \n                gauss_sigma = 8):\n    \n    # Create a blank canvas\n    # size of the canvas for the image\n    canvas = np.zeros((canvas_size, canvas_size))\n\n    # Translate the x, y values to fit the canvas\n    x_scaled = ((data[:, 0] - data[:, 0].min()) / (data[:, 0].max() - data[:, 0].min()) * canvas_size).astype(int)\n    y_scaled = ((data[:, 1] - data[:, 1].min()) / (data[:, 1].max() - data[:, 1].min()) * canvas_size).astype(int)\n\n\n    # Adjust the scaling to ensure values are within the bounds of the canvas\n    x_scaled = np.clip(x_scaled, 0, canvas_size - 1)\n    y_scaled = np.clip(y_scaled, 0, canvas_size - 1)\n\n    # Reset the canvas\n    canvas = np.zeros((canvas_size, canvas_size))\n\n    # Place stars on the canvas using their luminosity\n    for x_ind, y_ind, quant_ind in zip(x_scaled, y_scaled, data[:, 2]):\n        canvas[y_ind, x_ind] += quant_ind\n\n    # Apply a Gaussian blur to emulate the glow of stars\n    blurred_canvas = gaussian_filter(canvas, sigma=gauss_sigma)\n    \n    return blurred_canvas\n\n\nblurred_canvas_lum = canvas_plot(np.array([x_select, y_select, z_select]).T)\nblurred_canvas_mass = canvas_plot(np.array([x_select, y_select, m_select]).T)\n\n\nf, a = plt.subplots(1, 2, figsize=(14, 8))\ncmap_select = 'magma'\na[0].imshow(blurred_canvas_lum, cmap=cmap_select, origin='lower', extent=[x_select.min(), x_select.max(), y_select.min(), y_select.max()])\n# a[0].colorbar(label='Luminosity (Jansky)')\na[0].set_title('Galaxy Luminosity Distribution')\na[0].set_xlabel('x (Mpc)')\na[0].set_ylabel('y (Mpc)')\na[0].set_aspect('equal', 'box')\n\n\na[1].imshow(blurred_canvas_mass, cmap=cmap_select, origin='lower', extent=[x_select.min(), x_select.max(), y_select.min(), y_select.max()])\n# a[1].colorbar(label='Mass (Msol)')\n# a[1].scatter(x_scaled, y_scaled, s=1)\na[1].set_title('Galaxy Mass Distribution')\na[1].set_xlabel('x (Mpc)')\na[1].set_ylabel('y (Mpc)')\na[1].set_aspect('equal', 'box')\n\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "WATERCOLOR"
    ]
  },
  {
    "objectID": "paint.html",
    "href": "paint.html",
    "title": "Module: Paint",
    "section": "",
    "text": "1. First we import the following modules of hydro_colors\n\nsource\n\n\nphotometry_from_catalog\n\n photometry_from_catalog (galaxy_star_catalog_file:str='/home/runner/work/\n                          watercolor/watercolor/watercolor/data/test_hacc_\n                          stellar_catalog/Gal_Z0.txt',\n                          galaxy_redshift:numpy.float32=0.001)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngalaxy_star_catalog_file\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/test_hacc_stellar_catalog/Gal_Z0.txt\nInput galaxy catalog\n\n\ngalaxy_redshift\nfloat32\n0.001\nGalaxy redshift\n\n\nReturns\ntuple\n\n[SED, wavelengths, broadband magnitudes from lsst, cosmos, spherex]\n\n\n\n\n# #| hide \n\n# # u-g, g-r, i-z\n\n# plt.scatter(u-g, g-r)\n\n\n# # red # g-r &gt; 1.3\n# # blue # g-r &lt; 0.1",
    "crumbs": [
      "Module: Paint"
    ]
  },
  {
    "objectID": "dust_attenuation.html",
    "href": "dust_attenuation.html",
    "title": "Module: Dust attenuation",
    "section": "",
    "text": "source\n\nlog_total_stellar_mass\n\n log_total_stellar_mass (stellar_mass_i:&lt;built-infunctionarray&gt;=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstellar_mass_i\narray\nNone\nArray with individual stellar masses of the star particles\n\n\nReturns\nfloat32\n\nTotal stellar mass of the galaxy\n\n\n\n\nsource\n\n\nlog_total_stellar_metal\n\n log_total_stellar_metal (stellar_metal_i:&lt;built-infunctionarray&gt;=None,\n                          stellar_mass_i:&lt;built-infunctionarray&gt;=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstellar_metal_i\narray\nNone\nArray with individual stellar metallicities of the star particles\n\n\nstellar_mass_i\narray\nNone\nArray with individual stellar masses of the star particles\n\n\nReturns\nfloat32\n\nTotal stellar metallicity of the galaxy\n\n\n\n\nsource\n\n\nspectrum_dusted\n\n spectrum_dusted (pcolor:&lt;built-infunctionarray&gt;=None, wave:&lt;built-\n                  infunctionarray&gt;=None, logmstar:numpy.float32=None,\n                  metal:numpy.float32=None,\n                  galaxy_redshift:numpy.float32=None)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npcolor\narray\nNone\nSED without dust attenuation\n\n\nwave\narray\nNone\nWavelength in Angstorms\n\n\nlogmstar\nfloat32\nNone\nLog(stellar mass) of the galaxy\n\n\nmetal\nfloat32\nNone\nlog(metallicity) of the galaxy\n\n\ngalaxy_redshift\nfloat32\nNone\nRedshift of the galaxy\n\n\nReturns\narray\n\nDust attenuated SED\n\n\n\n\nsource\n\n\nhidden_prints\n\n hidden_prints ()",
    "crumbs": [
      "Module: Dust attenuation"
    ]
  },
  {
    "objectID": "filter_convolve.html",
    "href": "filter_convolve.html",
    "title": "Module: Filter convolution",
    "section": "",
    "text": "source\n\nload_filter_single\n\n load_filter_single (filtfile:str=None, norm:bool=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfiltfile\nstr\nNone\nIndividual filter files\n\n\nnorm\nbool\nTrue\nBandpass normalization condition\n\n\nReturns\ntuple\n\nWavelengths, bandpass values, central wavelengths, filter name\n\n\n\n\nsource\n\n\nclip_bandpass_values\n\n clip_bandpass_values (bandpass_wavs:numpy.float32=None,\n                       bandpass_vals:numpy.float32=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nbandpass_wavs\nfloat32\nNone\nBandpass wavelengths\n\n\nbandpass_vals\nfloat32\nNone\nBandpasses\n\n\nReturns\ntuple\n\nClipped bandpass wavelengths, clipped bandpass values\n\n\n\n\nsource\n\n\nload_survey_filters\n\n load_survey_filters (filtdir:str='data/filter_specifics/LSST',\n                      to_um:bool=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfiltdir\nstr\ndata/filter_specifics/LSST\nInput directory with all filter definitions\n\n\nto_um\nbool\nTrue\nTrue/False to convert wavelengths to microns\n\n\nReturns\ntuple\n\nCentral wavelengths, Bandpass wavelengths, Bandpass values, filter names\n\n\n\n\nsource\n\n\nload_survey_pickle\n\n load_survey_pickle (survey:str='LSST')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsurvey\nstr\nLSST\nSurvey\n\n\nReturns\ntuple\n\nCentral wavelengths, Bandpass wavelengths, Bandpass values, filter names\n\n\n\n\nsource\n\n\nphotometry_from_spectra\n\n photometry_from_spectra (central_wavelengths:&lt;built-\n                          infunctionarray&gt;=None, sed_um_wave:&lt;built-\n                          infunctionarray&gt;=None, sed_mJy_flux:&lt;built-\n                          infunctionarray&gt;=None, bandpass_wavs:&lt;built-\n                          infunctionarray&gt;=None, bandpass_vals:&lt;built-\n                          infunctionarray&gt;=None, bandpass_names:&lt;built-\n                          infunctionarray&gt;=None, interp_kind:str='linear',\n                          plot:bool=True, clip_bandpass:bool=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncentral_wavelengths\narray\nNone\nCentral wavelengths\n\n\nsed_um_wave\narray\nNone\nSED wavelengths (in microns)\n\n\nsed_mJy_flux\narray\nNone\nSED fluxes (in mJy)\n\n\nbandpass_wavs\narray\nNone\nBandpass wavelenths\n\n\nbandpass_vals\narray\nNone\nBandspass values\n\n\nbandpass_names\narray\nNone\nNames of the bandpasses\n\n\ninterp_kind\nstr\nlinear\nInterpolation type\n\n\nplot\nbool\nTrue\nPlotting SEDs with filter convolution\n\n\nclip_bandpass\nbool\nTrue\nClip bandpass condition\n\n\nReturns\ntuple\n\nFluxes, Apparent magnitudes, Band fluxes\n\n\n\n\n#hide \n\nwrite_pickle = True \n\nif write_pickle:\n\n    #### Converting numerious filter spec files to pickle files. To keep package loading simple\n\n    ####\n    raw_filter_specs_dir = '/lcrc/project/cosmo_ai/nramachandra/Projects/Hydro_paint/filter_specifics/'\n    \n    \n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'LSST', to_um=True)\n    out_filter_pickle = '../watercolor/data/filter_specifics/'\n\n\n    with open( out_filter_pickle + 'LSST' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n\n\n    #### \n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'cosmos', to_um=True)\n\n    with open( out_filter_pickle + 'COSMOS' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n\n\n    ####\n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'SPHEREx', to_um=True)\n\n    with open( out_filter_pickle + 'SPHEREx' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n        \n\n    ####\n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'WISE', to_um=True)\n\n    with open( out_filter_pickle + 'WISE' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n        \n    ####\n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'LEGACYSURVEY', to_um=True)\n\n    with open( out_filter_pickle + 'LEGACYSURVEY' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n        \n    ####\n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'2MASS', to_um=True)\n\n    with open( out_filter_pickle + '2MASS' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n        \n        \n    ####\n    survey_filter_structure = load_survey_filters(filtdir=raw_filter_specs_dir+'F784', to_um=True)\n\n    with open( out_filter_pickle + 'F784' + '.pickle', 'wb') as f:\n        pickle.dump(survey_filter_structure, f)\n\n\nsed_um_wave = spec_wave_ssp/1e4\n\nredsh_spec[1000:8000] = -1\nsed_mJy_flux = redsh_spec\n\nflux_survey, appmag_ext_survey, band_fluxes_survey = photometry_from_spectra(central_wavelengths, \n                                                                          sed_um_wave, \n                                                                          sed_mJy_flux, \n                                                                          bandpass_wavs, \n                                                                          bandpass_vals,\n                                                                          bandpass_names,\n                                                                          interp_kind='quadratic',\n                                                                          plot=True,\n                                                                          clip_bandpass=True)\n\nprint(band_fluxes_survey)\n\n/tmp/ipykernel_4039222/1111302042.py:33: RuntimeWarning: invalid value encountered in log10\n  appmag_ext = -2.5*np.log10(flux)+23.9\n\n\n\n\n\n\n\n\n\n[ 4.5533475e+02  2.4201126e+00  1.2335557e+03  5.6577069e+02\n  1.8720778e+03  7.2380774e+02  2.0283469e+02  1.8007083e+02\n  6.3637592e+02  1.6738370e+03  4.7848446e+01  1.3675365e+02\n  3.1849006e+03  5.1658069e+02  1.5569337e+02  9.0064032e+02\n  2.7637073e+02  7.4540900e+02  8.7086668e+00  6.4306891e+02\n -1.0000000e+00  1.5379898e+02  5.0915182e+02  1.1169507e+03\n  4.8164629e+03 -1.0000000e+00  3.5056263e+01  3.5173560e+02\n  3.5503848e+02  8.8481445e+01  3.8440708e+03]",
    "crumbs": [
      "Module: Filter convolution"
    ]
  },
  {
    "objectID": "calculate_csp.html",
    "href": "calculate_csp.html",
    "title": "Module: Compute CSF flux",
    "section": "",
    "text": "source\n\nssp_to_csp\n\n ssp_to_csp (spec_flux_ssp:numpy.ndarray)\n\n\n\n\n\nType\nDetails\n\n\n\n\nspec_flux_ssp\nndarray\nSSP SEDs\n\n\nReturns\narray\nCSP SED\n\n\n\n\nsource\n\n\ngalaxy_stellar_mass\n\n galaxy_stellar_mass (selected_star_masses:&lt;built-infunctionarray&gt;)\n\n\n\n\n\nType\nDetails\n\n\n\n\nselected_star_masses\narray\nSSP masses in a galaxy\n\n\nReturns\nfloat32\nTotal stellar mass of the galaxy\n\n\n\n\nsource\n\n\ntotal_luminosity\n\n total_luminosity (spec_flux_ssp:numpy.ndarray, spec_wave:&lt;built-\n                   infunctionarray&gt;)\n\n\n\n\n\nType\nDetails\n\n\n\n\nspec_flux_ssp\nndarray\nSSP SEDs\n\n\nspec_wave\narray\nSED Wavelength\n\n\nReturns\nfloat32\nLuminosity\n\n\n\n\nsource\n\n\ncalc_fluxes_for_galaxy\n\n calc_fluxes_for_galaxy (gal_file_in:str='/home/runner/work/watercolor/wat\n                         ercolor/watercolor/data/test_hacc_stellar_catalog\n                         /Gal_Z0.txt', unique_gal_tag:numpy.float32=None, \n                         spectral_library_flux:str='/home/runner/work/wate\n                         rcolor/watercolor/watercolor/data/sps_library_dat\n                         a/ssp_spec_flux_lines.npy', spectral_library_wave\n                         :str='/home/runner/work/watercolor/watercolor/wat\n                         ercolor/data/sps_library_data/ssp_spec_wave.npy',\n                         spectral_library_age:str='/home/runner/work/water\n                         color/watercolor/watercolor/data/sps_library_data\n                         /log_age.npy', spectral_library_metal:str='/home/\n                         runner/work/watercolor/watercolor/watercolor/data\n                         /sps_library_data/zlegend.npy')\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngal_file_in\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/test_hacc_stellar_catalog/Gal_Z0.txt\nHACC stellar catalog\n\n\nunique_gal_tag\nfloat32\nNone\nSelected galaxy tag\n\n\nspectral_library_flux\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/ssp_spec_flux_lines.npy\nFluxes in the spectral library,\n\n\nspectral_library_wave\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/ssp_spec_wave.npy\nWavelengths in the spectral library,\n\n\nspectral_library_age\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/log_age.npy\nAge in the spectral library,\n\n\nspectral_library_metal\nstr\n/home/runner/work/watercolor/watercolor/watercolor/data/sps_library_data/zlegend.npy\nMetallicity in the spectral library,\n\n\nReturns\ntuple\n\nSED wavelength (A), individual SSP SEDs (Lsun/A), CSP SED (Lsun/A), Luminosity, Galaxy stellar mass (Msun)",
    "crumbs": [
      "Module: Compute CSF flux"
    ]
  }
]
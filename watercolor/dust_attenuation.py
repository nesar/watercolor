"""Adding dust attenuation based on DustE modelling"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_dust_attenuation.ipynb.

# %% auto 0
__all__ = ['hidden_prints', 'spectrum_dusted', 'log_total_stellar_metal', 'log_total_stellar_mass']

# %% ../nbs/04_dust_attenuation.ipynb 4
import numpy as np
from .load_sim_stellar_catalog import load_hacc_galaxy_data
from .calculate_csp import calc_fluxes_for_galaxy
from .load_sim_stellar_catalog import GALS_FILE
from .load_sps_library import LIBRARY_FLUX_FILE, LIBRARY_WAVE_FILE, LIBRARY_AGE_FILE, LIBRARY_METAL_FILE

# %% ../nbs/04_dust_attenuation.ipynb 5
import sys
import os
from duste.DustAttnCalc import DustAttnCalc # https://github.com/Astropianist/DustE
from io import StringIO
from contextlib import contextmanager

# %% ../nbs/04_dust_attenuation.ipynb 10
# # Disable
# def blockPrint():
#     sys._jupyter_stdout = sys.stdout
#     sys.stdout = open(os.devnull, 'w')

# # Restore
# def enablePrint():
#     sys._jupyter_stdout = sys.stdout
#     sys.stdout = sys.__stdout__


@contextmanager
def hidden_prints(
                ): #Utility function to hide the print statements from duste
    original_stdout = sys.stdout
    sys.stdout = StringIO()
    yield
    sys.stdout = original_stdout
    

def spectrum_dusted(pcolor:np.array=None, # SED without dust attenuation
                  wave:np.array=None, # Wavelength in Angstorms
                  logmstar:np.float32=None, # Log(stellar mass) of the galaxy
                  metal:np.float32=None, # log(metallicity) of the galaxy
                  galaxy_redshift:np.float32=None # Redshift of the galaxy
                  )-> np.array: # Dust attenuated SED
     
    # blockPrint()
    
    with hidden_prints():
    
        dust_attn = DustAttnCalc(logM=logmstar, 
                                 # sfr=SFRz, 
                                 logZ=metal, 
                                 z = galaxy_redshift, 
                                 bv=1, 
                                 eff=0, 
                                 wv_arr=wave); # Two-component bivariate dust model (fitting both optical depth and slope) 

        dac, dac1, n, tau, tau1, n_err, tau_err, tau1_err = dust_attn.calcDust(plot_tau=False, max_num_plot=2);
    
    dac_avg, dac1_avg = np.average(dac, axis=0), np.average(dac1, axis=0)
    dust_ext_fac0 = np.exp(-1*dac_avg)*np.exp(-1*dac1_avg) #correct
    pcolor_attn = pcolor*dust_ext_fac0[0, :];
    
    # enablePrint()
    
    return pcolor_attn



def log_total_stellar_metal(stellar_metal_i:np.array=None, # Array with individual stellar metallicities of the star particles
                       stellar_mass_i:np.array=None, # Array with individual stellar masses of the star particles
                      )-> np.float32: # Total stellar metallicity of the galaxy
    
    total_stellar_mass = np.sum(stellar_mass_i)
    weighted_metal = np.sum(stellar_mass_i*stellar_metal_i)
    weighted_sum_metal = weighted_metal/total_stellar_mass
    return np.array([np.log10(weighted_sum_metal)])

def log_total_stellar_mass(stellar_mass_i:np.array=None, # Array with individual stellar masses of the star particles
                      )-> np.float32: # Total stellar mass of the galaxy
    total_stellar_mass = np.sum(stellar_mass_i)
    return np.array([np.log10(total_stellar_mass)])

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_cosmic_dimming.ipynb.

# %% auto 0
__all__ = ['convert_unit_spec_from_ergscm2A', 'convert_unit_spec_from_uJy', 'cosmo_redshifting']

# %% ../nbs/05_cosmic_dimming.ipynb 3
import numpy as np
from astropy.cosmology import *
from .ssp_interpolation import spec_ssp_lookup

from .load_sps_library import load_fsps_spectral_library, load_fsps_age_metallicity
from .load_sps_library import STELLAR_LIBRARY_DIR

from .load_sim_stellar_catalog import load_hacc_galaxy_data
from .load_sim_stellar_catalog import GALS_FILE
from .load_sim_stellar_catalog import Z_SOLAR_PADOVA, H0

from .calculate_csp import calc_fluxes_for_galaxy

# %% ../nbs/05_cosmic_dimming.ipynb 10
def convert_unit_spec_from_ergscm2A(wave:np.array, # Input flux from 'erg/s/cm2/A'
                                    spec:np.array, # Wavelength 
                                    funit:str='Jy' # Output units
                                    ) -> np.array: # Converted flux to 'erg/s/cm2' or 'Jy'

    if funit=='erg/s/cm2/A' or funit==0:
        spec_new = spec
    elif funit=='erg/s/cm2' or funit==1:
        spec_new = np.asarray(spec)*np.asarray(wave)
    elif funit=='Jy' or funit==2:
        spec_new = np.asarray(spec)*np.asarray(wave)*np.asarray(wave)/1.0e-23/2.998e+18
    else:
        print ("The input funit is not recognized!")
        sys.exit()

    return spec_new


def convert_unit_spec_from_uJy(wave:np.array, # Input flux from 'uJy'
                               spec:np.array, # Wavelength 
                               funit:str='Jy' # Output units
                               ) -> tuple: # Converted flux to 'erg/s/cm2' or 'erg/s/cm2/A'

    if funit=='Jy' or funit==0:
        spec_new = spec*1e6
    elif funit=='erg/s/cm2' or funit==1:
        spec_new = np.asarray(spec*1e6)/np.asarray(wave)
    elif funit=='erg/s/cm2/A' or funit==2:
        spec_new = np.asarray(spec*1e6)*(1.0e-23*2.998e+18)/(np.asarray(wave)*np.asarray(wave))
    else:
        print ("The input funit is not recognized!")
        sys.exit()

    return spec_new

# %% ../nbs/05_cosmic_dimming.ipynb 11
def cosmo_redshifting(DL_Gpc:np.float64=0.0, # Luminosity distance (LD) in unit of Gpc.
                      cosmo:str='flat_LCDM', # Choice of Astropy cosmology models ['flat_LCDM', 'WMAP9', 'Planck15']
                      H0:np.float64=70.0, # Hubble constant at z=0.
                      Om0:np.float64=0.3, # Omega matter at z=0.
                      z:np.float64=0.01, # Redshift
                      wave:np.array=[], # Wavelength grids of the input spectrum.
                      spec: np.array=[] # Fluxes of the input spectrum.  
                      ) -> tuple: # wavelength, SED of the redshifted and dimmed spectrum

    if DL_Gpc > 0.0:
        DL = DL_Gpc
        DL = DL*3.08568e+27
    else:
        if cosmo=='flat_LCDM' or cosmo==0:
            cosmo1 = FlatLambdaCDM(H0=H0, Om0=Om0)
            DL = cosmo1.luminosity_distance(z)      # in unit of Mpc
        
        elif cosmo=='WMAP9' or cosmo==3:
            DL = WMAP9.luminosity_distance(z)
        
        elif cosmo=='Planck15' or cosmo==5:
            DL = Planck15.luminosity_distance(z)

        
        DL = DL.value/1.0e+3
        DL = DL*3.08568e+27

    redsh_wave = (1.0+z)*np.asarray(wave)
    cor = 1.0/12.56637061/DL/DL/(1.0+z)           # flux in L_solar cm^-2 A^-1
    cor = cor*3.826e+33                           # flux in erg s^-1 cm^-2 A^-1
    redsh_spec = cor*np.asarray(spec)

    return redsh_wave, redsh_spec

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_cosmic_dimming.ipynb.

# %% auto 0
__all__ = ['spectrum_convert_from_ergscm2A', 'spectrum_convert_from_uJy', 'spectrum_dimmed_and_redshifted',
           'combine_redshift_and_dimming_effect']

# %% ../nbs/05_cosmic_dimming.ipynb 3
import numpy as np
from astropy.cosmology import *
from .ssp_interpolation import spec_ssp_lookup

from .load_sps_library import load_fsps_spectral_library, load_fsps_age_metallicity
from .load_sps_library import LIBRARY_FLUX_FILE, LIBRARY_WAVE_FILE, LIBRARY_AGE_FILE, LIBRARY_METAL_FILE
from .load_sim_stellar_catalog import load_hacc_galaxy_data
from .load_sim_stellar_catalog import GALS_FILE
from .load_sim_stellar_catalog import Z_SOLAR_PADOVA, H0

from .calculate_csp import calc_fluxes_for_galaxy

# %% ../nbs/05_cosmic_dimming.ipynb 11
def spectrum_convert_from_ergscm2A(wave:np.array, # Input flux from 'erg/s/cm2/A'
                                    spec:np.array, # Wavelength 
                                    funit:str='Jy' # Output units
                                    ) -> np.array: # Converted flux to 'erg/s/cm2' or 'Jy'

    if funit=='erg/s/cm2/A' or funit==0:
        spec_new = spec
    elif funit=='erg/s/cm2' or funit==1:
        spec_new = np.asarray(spec)*np.asarray(wave)
    elif funit=='Jy' or funit==2:
        spec_new = np.asarray(spec)*np.asarray(wave)*np.asarray(wave)/1.0e-23/2.998e+18
    else:
        print ("The input funit is not recognized!")
        sys.exit()

    return spec_new


def spectrum_convert_from_uJy(wave:np.array, # Input flux from 'uJy'
                               spec:np.array, # Wavelength 
                               funit:str='Jy' # Output units
                               ) -> tuple: # Converted flux to 'erg/s/cm2' or 'erg/s/cm2/A'

    if funit=='Jy' or funit==0:
        spec_new = spec*1e6
    elif funit=='erg/s/cm2' or funit==1:
        spec_new = np.asarray(spec*1e6)/np.asarray(wave)
    elif funit=='erg/s/cm2/A' or funit==2:
        spec_new = np.asarray(spec*1e6)*(1.0e-23*2.998e+18)/(np.asarray(wave)*np.asarray(wave))
    else:
        print ("The input funit is not recognized!")
        sys.exit()

    return spec_new

# %% ../nbs/05_cosmic_dimming.ipynb 13
def spectrum_dimmed_and_redshifted(DL_Gpc:np.float64=0.0, # Luminosity distance (LD) in unit of Gpc.
                      cosmo:str='flat_LCDM', # Choice of Astropy cosmology models ['flat_LCDM', 'WMAP9', 'Planck15']
                      H0:np.float64=70.0, # Hubble constant at z=0.
                      Om0:np.float64=0.3, # Omega matter at z=0.
                      galaxy_redshift:np.float64=0.01, # Redshift
                      wave:np.array=[], # Wavelength grids of the input spectrum in [A]
                      spec: np.array=[] # Fluxes of the input spectrum in [L_bolometric A^-1]
                      ) -> tuple: # wavelength, SED of the redshifted and dimmed spectrum

    if DL_Gpc > 0.0:
        DL = DL_Gpc # in [Gpc]
        DL = DL*3.08568e+27 #in [cm]
    else:
        if cosmo=='flat_LCDM' or cosmo==0:
            cosmo1 = FlatLambdaCDM(H0=H0, Om0=Om0)
            DL = cosmo1.luminosity_distance(galaxy_redshift)      # in unit of [Mpc]
        
        elif cosmo=='WMAP9' or cosmo==3:
            DL = WMAP9.luminosity_distance(galaxy_redshift) # in unit of [Mpc]
        
        elif cosmo=='Planck15' or cosmo==5:
            DL = Planck15.luminosity_distance(galaxy_redshift) # in unit of [Mpc]

        
        DL = DL.value/1.0e+3 #in [Gpc]
        DL = DL*3.08568e+27 # in [cm]

    redsh_wave = (1.0+galaxy_redshift)*np.asarray(wave) # In [A]?
    cor = 1.0/(4*np.pi*DL*DL)/(1.0+galaxy_redshift)    # In [cm^-2]     
    # cor = cor*3.826e+33                           # in [erg s^-1 cm^-2 A^-1]
    
    redsh_spec = cor*np.asarray(spec) #  in [L_bolometric cm^-2 A^-1]
    redsh_spec = redsh_spec*(3.0128*1e28) # in [W cm^-2 A^-1]
    redsh_spec = redsh_spec*(1e8) # in [erg s^-1 cm^-2 A^-1]
    
    return redsh_wave, redsh_spec #[A] and [erg s^-1 cm^-2 A^-1]

# %% ../nbs/05_cosmic_dimming.ipynb 20
def combine_redshift_and_dimming_effect(wave:np.array=[], # Wavelength grids of the input spectrum in Unit (A)
                                        spec:np.array=[], # # Fluxes of the input spectrum. Fluxes of the input spectrum (in L_bolometric A^-1)
                                        galaxy_redshift:np.float64=0.01 # Redshift of the galaxy
                                       ) ->tuple: # Output of wavelength and spectra
    

    cosmo1 = FlatLambdaCDM(H0=70.0, Om0=0.3)
    DL = cosmo1.luminosity_distance(galaxy_redshift)      # in unit of [Mpc]
    DL = DL.value/1e3 #in [Gpc]
    dL = DL*3.08568e+27 # in [cm]
    # Redefine the speed of light in cm/s
    c = 2.998e10

    spec0 = spec*1e33 / (4*np.pi*(dL**2)*(1.0+galaxy_redshift))  # Convert luminosity to flux in erg/s/cm^2/A
    spec0 *= wave**2 / c  # Convert flux per A to flux per Hz in erg/s/cm^2/Hz
    spec0 *= 1e23  # Convert flux from erg/s/cm^2/Hz to Jy
    spec0 *= 1e3  # Jy to mJy
    
    wave0 = (1.0+galaxy_redshift)*np.asarray(wave) # In [A]?
    
    return wave0, spec0 # redsh_wave in [A], redsh_spec in [mJy]
